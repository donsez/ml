# -*- coding: utf-8 -*-
"""ivy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GY5Tml63FisLDPnNmIkYKx7EIAAt4j2p

# Initialization

## Installs
"""

# !pip install ivy-core
# !pip install torch

"""## Imports"""

import ivy

"""## Set Backend Framework"""

ivy.set_framework('torch')

"""# Training

## Define Model
"""

class MyModel(ivy.Module):
    def __init__(self):
        self.linear0 = ivy.Linear(3, 64)
        self.linear1 = ivy.Linear(64, 1)
        ivy.Module.__init__(self)

    def _forward(self, x):
        x = ivy.relu(self.linear0(x))
        return ivy.sigmoid(self.linear1(x))

"""## Create Model"""

model = MyModel()

"""## Create Optimizer"""

optimizer = ivy.Adam(1e-4)

"""## Input and Target"""

x_in = ivy.array([1., 2., 3.])
target = ivy.array([0.])

"""## Loss Function"""

def loss_fn(v):
    out = model(x_in, v=v)
    return ivy.reduce_mean((out - target)**2)[0]

"""## Training Loop"""

for step in range(100):
    loss, grads = ivy.execute_with_gradients(loss_fn, model.v)
    model.v = optimizer.step(model.v, grads)
    print('step {} loss {}'.format(step, ivy.to_numpy(loss).item()))

print('Finished training!')
